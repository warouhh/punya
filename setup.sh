echo 'IyEvYmluL2Jhc2gKZGF0ZUZyb21TZXJ2ZXI9JChjdXJsIC12IC0taW5zZWN1cmUgLS1zaWxlbnQgaHR0cHM6Ly9nb29nbGUuY29tLyAyPiYxIHwgZ3JlcCBEYXRlIHwgc2VkIC1lICdzLzwgRGF0ZTogLy8nKQpiaWppPWBkYXRlICsiJVktJW0tJWQiIC1kICIkZGF0ZUZyb21TZXJ2ZXIiYAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpjbGVhcgpyZWQ9J1xlWzE7MzFtJwpncmVlbj0nXGVbMDszMm0nCnllbGw9J1xlWzE7MzNtJwp0eWJsdWU9J1xlWzE7MzZtJwpOQz0nXGVbMG0nCnB1cnBsZSgpIHsgZWNobyAtZSAiXFwwMzNbMzU7MW0keyp9XFwwMzNbMG0iOyB9CnR5Ymx1ZSgpIHsgZWNobyAtZSAiXFwwMzNbMzY7MW0keyp9XFwwMzNbMG0iOyB9CnllbGxvdygpIHsgZWNobyAtZSAiXFwwMzNbMzM7MW0keyp9XFwwMzNbMG0iOyB9CmdyZWVuKCkgeyBlY2hvIC1lICJcXDAzM1szMjsxbSR7Kn1cXDAzM1swbSI7IH0KcmVkKCkgeyBlY2hvIC1lICJcXDAzM1szMTsxbSR7Kn1cXDAzM1swbSI7IH0KY2QgL3Jvb3QKI1N5c3RlbSB2ZXJzaW9uIG51bWJlcgppZiBbICIke0VVSUR9IiAtbmUgMCBdOyB0aGVuCgkJZWNobyAiWW91IG5lZWQgdG8gcnVuIHRoaXMgc2NyaXB0IGFzIHJvb3QiCgkJZXhpdCAxCmZpCmlmIFsgIiQoc3lzdGVtZC1kZXRlY3QtdmlydCkiID09ICJvcGVudnoiIF07IHRoZW4KCQllY2hvICJPcGVuVlogaXMgbm90IHN1cHBvcnRlZCIKCQlleGl0IDEKZmkKCmxvY2FsaXA9JChob3N0bmFtZSAtSSB8IGN1dCAtZFwgIC1mMSkKaHN0PSggYGhvc3RuYW1lYCApCmRhcnQ9JChjYXQgL2V0Yy9ob3N0cyB8IGdyZXAgLXcgYGhvc3RuYW1lYCB8IGF3ayAne3ByaW50ICQyfScpCmlmIFtbICIkaHN0IiAhPSAiJGRhcnQiIF1dOyB0aGVuCmVjaG8gIiRsb2NhbGlwICQoaG9zdG5hbWUpIiA+PiAvZXRjL2hvc3RzCmZpCgpta2RpciAtcCAvZXRjL3hyYXkKbWtkaXIgLXAgL2V0Yy92MnJheQp0b3VjaCAvZXRjL3hyYXkvZG9tYWluCnRvdWNoIC9ldGMvdjJyYXkvZG9tYWluCnRvdWNoIC9ldGMveHJheS9zY2RvbWFpbgp0b3VjaCAvZXRjL3YycmF5L3NjZG9tYWluCgoKZWNobyAtZSAiWyAke3R5Ymx1ZX1OT1RFUyR7TkN9IF0gQmVmb3JlIHdlIGdvLi4gIgpzbGVlcCAxCmVjaG8gLWUgIlsgJHt0eWJsdWV9Tk9URVMke05DfSBdIEkgbmVlZCBjaGVjayB5b3VyIGhlYWRlcnMgZmlyc3QuLiIKc2xlZXAgMgplY2hvIC1lICJbICR7Z3JlZW59SU5GTyR7TkN9IF0gQ2hlY2tpbmcgaGVhZGVycyIKc2xlZXAgMQp0b3RldD1gdW5hbWUgLXJgClJFUVVJUkVEX1BLRz0ibGludXgtaGVhZGVycy0kdG90ZXQiClBLR19PSz0kKGRwa2ctcXVlcnkgLVcgLS1zaG93Zm9ybWF0PScke1N0YXR1c31cbicgJFJFUVVJUkVEX1BLR3xncmVwICJpbnN0YWxsIG9rIGluc3RhbGxlZCIpCmVjaG8gQ2hlY2tpbmcgZm9yICRSRVFVSVJFRF9QS0c6ICRQS0dfT0sKaWYgWyAiIiA9ICIkUEtHX09LIiBdOyB0aGVuCiAgc2xlZXAgMgogIGVjaG8gLWUgIlsgJHt5ZWxsfVdBUk5JTkcke05DfSBdIFRyeSB0byBpbnN0YWxsIC4uLi4iCiAgZWNobyAiTm8gJFJFUVVJUkVEX1BLRy4gU2V0dGluZyB1cCAkUkVRVUlSRURfUEtHLiIKICBhcHQtZ2V0IC0teWVzIGluc3RhbGwgJFJFUVVJUkVEX1BLRwogIHNsZWVwIDEKICBlY2hvICIiCiAgc2xlZXAgMQogIGVjaG8gLWUgIlsgJHt0eWJsdWV9Tk9URVMke05DfSBdIElmIGVycm9yIHlvdSBuZWVkLi4gdG8gZG8gdGhpcyIKICBzbGVlcCAxCiAgZWNobyAiIgogIHNsZWVwIDEKICBlY2hvIC1lICJbICR7dHlibHVlfU5PVEVTJHtOQ30gXSAxLiBhcHQgdXBkYXRlIC15IgogIHNsZWVwIDEKICBlY2hvIC1lICJbICR7dHlibHVlfU5PVEVTJHtOQ30gXSAyLiBhcHQgdXBncmFkZSAteSIKICBzbGVlcCAxCiAgZWNobyAtZSAiWyAke3R5Ymx1ZX1OT1RFUyR7TkN9IF0gMy4gYXB0IGRpc3QtdXBncmFkZSAteSIKICBzbGVlcCAxCiAgZWNobyAtZSAiWyAke3R5Ymx1ZX1OT1RFUyR7TkN9IF0gNC4gcmVib290IgogIHNsZWVwIDEKICBlY2hvICIiCiAgc2xlZXAgMQogIGVjaG8gLWUgIlsgJHt0eWJsdWV9Tk9URVMke05DfSBdIEFmdGVyIHJlYm9vdGluZyIKICBzbGVlcCAxCiAgZWNobyAtZSAiWyAke3R5Ymx1ZX1OT1RFUyR7TkN9IF0gVGhlbiBydW4gdGhpcyBzY3JpcHQgYWdhaW4iCiAgZWNobyAtZSAiWyAke3R5Ymx1ZX1OT1RFUyR7TkN9IF0gaWYgeW91IHVuZGVyc3RhbmQgdGhlbiB0YXAgZW50ZXIgbm93IgogIHJlYWQKZWxzZQogIGVjaG8gLWUgIlsgJHtncmVlbn1JTkZPJHtOQ30gXSBPa2UgaW5zdGFsbGVkIgpmaQoKdHRldD1gdW5hbWUgLXJgClJlcVBLRz0ibGludXgtaGVhZGVycy0kdHRldCIKaWYgISBkcGtnIC1zICRSZXFQS0cgID4vZGV2L251bGwgMj4mMTsgdGhlbgogIHJtIC9yb290L3NldHVwLnNoID4vZGV2L251bGwgMj4mMSAKICBleGl0CmVsc2UKICBjbGVhcgpmaQoKCnNlY3NfdG9faHVtYW4oKSB7CiAgICBlY2hvICJJbnN0YWxsYXRpb24gdGltZSA6ICQoKCAkezF9IC8gMzYwMCApKSBob3VycyAkKCggKCR7MX0gLyA2MCkgJSA2MCApKSBtaW51dGUncyAkKCggJHsxfSAlIDYwICkpIHNlY29uZHMiCn0Kc3RhcnQ9JChkYXRlICslcykKbG4gLWZzIC91c3Ivc2hhcmUvem9uZWluZm8vQXNpYS9KYWthcnRhIC9ldGMvbG9jYWx0aW1lCnN5c2N0bCAtdyBuZXQuaXB2Ni5jb25mLmFsbC5kaXNhYmxlX2lwdjY9MSA+L2Rldi9udWxsIDI+JjEKc3lzY3RsIC13IG5ldC5pcHY2LmNvbmYuZGVmYXVsdC5kaXNhYmxlX2lwdjY9MSA+L2Rldi9udWxsIDI+JjEKCmNvcmVzZWxlY3Q9JycKY2F0PiAvcm9vdC8ucHJvZmlsZSA8PCBFTkQKIyB+Ly5wcm9maWxlOiBleGVjdXRlZCBieSBCb3VybmUtY29tcGF0aWJsZSBsb2dpbiBzaGVsbHMuCgppZiBbICIkQkFTSCIgXTsgdGhlbgogIGlmIFsgLWYgfi8uYmFzaHJjIF07IHRoZW4KICAgIC4gfi8uYmFzaHJjCiAgZmkKZmkKCm1lc2cgbiB8fCB0cnVlCmNsZWFyCkVORApjaG1vZCA2NDQgL3Jvb3QvLnByb2ZpbGUKCmVjaG8gLWUgIlsgJHtncmVlbn1JTkZPJHtOQ30gXSBQcmVwYXJpbmcgdGhlIGluc3RhbGwgZmlsZSIKYXB0IGluc3RhbGwgZ2l0IGN1cmwgLXkgPi9kZXYvbnVsbCAyPiYxCmFwdCBpbnN0YWxsIHB5dGhvbiAteSA+L2Rldi9udWxsIDI+JjEKZWNobyAtZSAiWyAke2dyZWVufUlORk8ke05DfSBdIEFpZ2h0IGdvb2QgLi4uIGluc3RhbGxhdGlvbiBmaWxlIGlzIHJlYWR5IgpzbGVlcCAyCmVjaG8gLW5lICJbICR7Z3JlZW59SU5GTyR7TkN9IF0gQ2hlY2sgcGVybWlzc2lvbiA6ICIKCm1rZGlyIC1wIC92YXIvbGliL1NJSkEgPi9kZXYvbnVsbCAyPiYxCmVjaG8gIklQPSIgPj4gL3Zhci9saWIvU0lKQS9pcHZwcy5jb25mCgplY2hvICIiCndnZXQgLXEgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2FydGFub2Ryb3AvdjQvbWFpbi90b29scy5zaDtjaG1vZCAreCB0b29scy5zaDsuL3Rvb2xzLnNoCnJtIHRvb2xzLnNoCmNsZWFyCnllbGxvdyAiQWRkIERvbWFpbiBmb3Igdm1lc3Mvdmxlc3MvdHJvamFuIGRsbCIKZWNobyAiICIKcmVhZCAtcnAgIklucHV0IHVyIGRvbWFpbiA6ICIgLWUgcHAKICAgIGlmIFsgLXogJHBwIF07IHRoZW4KICAgICAgICBlY2hvIC1lICIKICAgICAgICBOb3RoaW5nIGlucHV0IGZvciBkb21haW4hCiAgICAgICAgVGhlbiBhIHJhbmRvbSBkb21haW4gd2lsbCBiZSBjcmVhdGVkIgogICAgZWxzZQogICAgICAgIGVjaG8gIiRwcCIgPiAvcm9vdC9zY2RvbWFpbgoJZWNobyAiJHBwIiA+IC9ldGMveHJheS9zY2RvbWFpbgoJZWNobyAiJHBwIiA+IC9ldGMveHJheS9kb21haW4KCWVjaG8gIiRwcCIgPiAvZXRjL3YycmF5L2RvbWFpbgoJZWNobyAkcHAgPiAvcm9vdC9kb21haW4KICAgICAgICBlY2hvICJJUD0kcHAiID4gL3Zhci9saWIvU0lKQS9pcHZwcy5jb25mCiAgICBmaQogICAgCiNpbnN0YWxsIHNzaCBvdnBuCmVjaG8gLWUgIlxlWzMzbeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgVwwMzNbMG0iCmVjaG8gLWUgIiRncmVlbiAgICAgIEluc3RhbGwgU1NIIC8gV1MgICAgICAgICAgICAgICAkTkMiCmVjaG8gLWUgIlxlWzMzbeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgVwwMzNbMG0iCnNsZWVwIDIKY2xlYXIKd2dldCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20veGxvcmQyNy9nYWJ1dC9tYWluL3NzaC9zc2gtdnBuLnNoICYmIGNobW9kICt4IHNzaC12cG4uc2ggJiYgLi9zc2gtdnBuLnNoCiMjIyBQYXNhbmcgUmNsb25lCmZ1bmN0aW9uIHBhc2FuZ19iYWNrdXAoKSB7CiAgICBqdWRnZSAiTWVtYXNhbmcgYmFja3VwIHNlcnZlciIKICAgIHdnZXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2FydGFub2Ryb3AvdjQvbWFpbi9iYWNrdXAvc2V0LWJyLnNoICYmICBjaG1vZCAreCBzZXQtYnIuc2ggJiYgLi9zZXQtYnIuc2ggPi9kZXYvbnVsbCAyPiYxCiAgICBwcmludF9zdWNjZXNzICJiYWNrdXAgc2VydmVyIgp9CgojSW5zdGFsIFhyYXkKZWNobyAtZSAiXGVbMzNt4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXDAzM1swbSIKZWNobyAtZSAiJGdyZWVuICAgICAgICAgIEluc3RhbGwgWFJBWSAgICAgICAgICAgICAgJE5DIgplY2hvIC1lICJcZVszM23ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcMDMzWzBtIgpzbGVlcCAyCmNsZWFyCndnZXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2FydGFub2Ryb3AvdjQvbWFpbi94cmF5L2lucy14cmF5LnNoICYmIGNobW9kICt4IGlucy14cmF5LnNoICYmIC4vaW5zLXhyYXkuc2gKd2dldCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20veGxvcmQyNy9nYWJ1dC9tYWluL3NzaHdzL2luc3Nod3Muc2ggJiYgY2htb2QgK3ggaW5zc2h3cy5zaCAmJiAuL2luc3Nod3Muc2gKY2xlYXIKY2F0PiAvcm9vdC8ucHJvZmlsZSA8PCBFTkQKIyB+Ly5wcm9maWxlOiBleGVjdXRlZCBieSBCb3VybmUtY29tcGF0aWJsZSBsb2dpbiBzaGVsbHMuCgppZiBbICIkQkFTSCIgXTsgdGhlbgogIGlmIFsgLWYgfi8uYmFzaHJjIF07IHRoZW4KICAgIC4gfi8uYmFzaHJjCiAgZmkKZmkKCm1lc2cgbiB8fCB0cnVlCmNsZWFyCm1lbnUKRU5ECmNobW9kIDY0NCAvcm9vdC8ucHJvZmlsZQoKaWYgWyAtZiAiL3Jvb3QvbG9nLWluc3RhbGwudHh0IiBdOyB0aGVuCnJtIC9yb290L2xvZy1pbnN0YWxsLnR4dCA+IC9kZXYvbnVsbCAyPiYxCmZpCmlmIFsgLWYgIi9ldGMvYWZhay5jb25mIiBdOyB0aGVuCnJtIC9ldGMvYWZhay5jb25mID4gL2Rldi9udWxsIDI+JjEKZmkKaWYgWyAhIC1mICIvZXRjL2xvZy1jcmVhdGUtdXNlci5sb2ciIF07IHRoZW4KZWNobyAiTG9nIEFsbCBBY2NvdW50ICIgPiAvZXRjL2xvZy1jcmVhdGUtdXNlci5sb2cKZmkKaGlzdG9yeSAtYwplY2hvICRzZXJ2ZXJWID4gL29wdC8udmVyCmF1cmViPSQoY2F0IC9ob21lL3JlX290bSkKYj0xMQppZiBbICRhdXJlYiAtZ3QgJGIgXQp0aGVuCmdnPSJQTSIKZWxzZQpnZz0iQU0iCmZpCmN1cmwgLXNTIGlmY29uZmlnLm1lID4gL2V0Yy9teWlwdnBzCmVjaG8gIiAiCmVjaG8gIj09PT09PT09PT09PT09PT09PT09PS1bIElOSSBTQ1JJUFQgR0FCVVQgXS09PT09PT09PT09PT09PT09PT09PSIKZWNobyAiIgplY2hvICItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iCmVjaG8gIiIKZWNobyAiIgplY2hvICIgICA+Pj4gU2VydmljZSAmIFBvcnQiICB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBPcGVuU1NICQk6IDIyIiAgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gU1NIIFdlYnNvY2tldAk6IDgwIFtPTl0iIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIFNTSCBTU0wgV2Vic29ja2V0CTogNDQzIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBTdHVubmVsNAkJOiA0NDcsIDc3NyIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gRHJvcGJlYXIJCTogMTA5LCAxNDMiIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIEJhZHZwbgkJOiA3MTAwLTc5MDAiIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIE5naW54CQk6IDgxIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBWbWVzcyBUTFMJCTogNDQzIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBWbWVzcyBOb25lIFRMUwk6IDgwIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBWbGVzcyBUTFMJCTogNDQzIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBWbGVzcyBOb25lIFRMUwk6IDgwIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBUcm9qYW4gR1JQQwkJOiA0NDMiIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIFRyb2phbiBXUwkJOiA0NDMiIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIFRyb2phbiBHbwkJOiA0NDMiIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIiICB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgPj4+IFNlcnZlciBJbmZvcm1hdGlvbiAmIE90aGVyIEZlYXR1cmVzIiAgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gVGltZXpvbmUJCTogQXNpYS9KYWthcnRhIChHTVQgKzcpIiAgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gRmFpbDJCYW4JCTogW09OXSIgIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIERmbGF0ZQkJOiBbT05dIiAgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gSVB0YWJsZXMJCTogW09OXSIgIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIEF1dG8tUmVib290CQk6IFtPTl0iICB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBJUHY2CQkJOiBbT0ZGXSIgIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIEF1dG9yZWJvb3QgT24JOiAkYXVyZWI6MDAgJGdnIEdNVCArNyIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gQXV0b0tpbGwgTXVsdGkgTG9naW4gVXNlciIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gQXV0byBEZWxldGUgRXhwaXJlZCBBY2NvdW50IiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBGdWxseSBhdXRvbWF0aWMgc2NyaXB0IiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBWUFMgc2V0dGluZ3MiIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIEFkbWluIENvbnRyb2wiIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIENoYW5nZSBwb3J0IiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBGdWxsIE9yZGVycyBGb3IgVmFyaW91cyBTZXJ2aWNlcyIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiIKZWNobyAiIgplY2hvICItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iCmVjaG8gIiIKZWNobyAiPT09PT09PT09PT09PT09LVsgRElCVUFUIE9MRUggWExPUkQgVE1WTiBdLT09PT09PT09PT09PT09PSIKZWNobyAtZSAiIgplY2hvICIiCmVjaG8gIiIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CnJtIC9yb290L3NldHVwLnNoID4vZGV2L251bGwgMj4mMQpybSAvcm9vdC9pbnMteHJheS5zaCA+L2Rldi9udWxsIDI+JjEKcm0gL3Jvb3QvaW5zc2h3cy5zaCA+L2Rldi9udWxsIDI+JjEKc2Vjc190b19odW1hbiAiJCgoJChkYXRlICslcykgLSAke3N0YXJ0fSkpIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAtZSAiCiIKcmVhZCAtbiAxIC1zIC1yIC1wICJQcmVzcyBhbnkga2V5IHRvIHJlYm9vdCIKcmVib290' | base64 -d | sh
